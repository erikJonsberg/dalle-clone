import { useState, useEffect, SetStateAction } from "react";
import { Loader, Card, FormField } from "../components";

type Props = {
	data: any;
	title: string;
};

const RenderCards = ({ data, title }: Props) => {
	if (data?.length > 0) {
		return data.map((post: any) => <Card key={post._id} {...post} />);
	}
	return (
		<h2 className='mt-5 font-bold text-indigo-500 text-xl uppercase'>
			{title}
		</h2>
	);
};

const Home = () => {
	const [loading, setLoading] = useState(false);
	const [allPosts, setAllPosts] = useState([]);
	const [searchText, setSearchText] = useState("");
	const [searchTimeout, setSearchTimeout] = useState<any | null>(null);
	const [searchedResults, setSearchedResults] = useState<any[]>([]);

	const fetchPosts = async () => {
		setLoading(true);
		try {
			const response = await fetch("http://localhost:8000/api/v1/posts", {
				method: "GET",
				headers: {
					"Content-Type": "application/json",
				},
			});
			if (response.ok) {
				const result = await response.json();
				setAllPosts(result.data.reverse());
			}
		} catch (error) {
			console.error(error);
		} finally {
			setLoading(false);
		}
	};

	useEffect(() => {
		fetchPosts();
	}, []);

	const handleSearchChange = (e: {
		target: { value: SetStateAction<string> };
	}) => {
		clearTimeout(searchTimeout);
		setSearchText(e.target.value);
		setSearchTimeout(
			setTimeout(() => {
				const searchResult = allPosts.filter(
					(item: { name: string; prompt: string }) =>
						item.name.toLowerCase().includes(searchText.toLowerCase()) ||
						item.prompt.toLowerCase().includes(searchText.toLowerCase())
				);

				setSearchedResults(searchResult);
			}, 500)
		);
	};

	return (
		<section className='max-w-7xl mx-auto'>
			<div>
				<h1 className='font-extrabold text-gray-950 text-2xl'>
					The Community Showcase
				</h1>
				<p className='mt-2 text-gray-500 max-w-lg'>
					Browse through a collection of imaginative and visually stunning
					images generated by DALL-E AI.
				</p>
				<div className='mt-16'>
					<FormField
						LabelName='Search'
						type='text'
						name='search'
						placeholder='Search for posts'
						value={searchText}
						handleChange={handleSearchChange}
					/>
				</div>
				<div className='mt-10'>
					{loading ? (
						<div className='flex justify-center items-center'>
							<Loader />
						</div>
					) : (
						<>
							{searchText && (
								<h2 className='text-gray-500 text-xl mb-3 font-medium'>
									Showing results for{" "}
									<span className='text-gray-950'>{searchText}</span>
								</h2>
							)}
							<div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'>
								{searchText ? (
									<RenderCards
										data={searchedResults}
										title='No search results found'
									/>
								) : (
									<RenderCards data={allPosts} title='No posts found' />
								)}
							</div>
						</>
					)}
				</div>
			</div>
		</section>
	);
};

export default Home;
